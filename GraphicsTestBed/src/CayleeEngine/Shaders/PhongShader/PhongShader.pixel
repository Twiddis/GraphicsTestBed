#include "../InputLayouts/default.hlsl"
#include "../ConstantBuffers/Light.hlsl"

LIGHT(0);

struct FSQ_Vertex
{
	float4 pos : SV_POSITION;
	float2 uv  : TEXCOORD;
};

SamplerState gSampler : register(s0);
Texture2D<float4> gGBuffer[4] : register(t0);

float4 main(FSQ_Vertex vin) : SV_TARGET
{
  float4 world_pos = gGBuffer[0].Sample(gSampler, vin.uv);
  float4 normal =    gGBuffer[1].Sample(gSampler, vin.uv);
  float4 diffuse =   gGBuffer[2].Sample(gSampler, vin.uv);
  float4 specular =  gGBuffer[3].Sample(gSampler, vin.uv);

  const float4 light_color = float4(1.0f, 1.0f, 1.0f, 1.0f);

    // Calculate Global Lighting
	float3 light_dir = normalize(light_pos - world_pos.xyz);
	float light_angle = saturate(dot(light_dir, normal.xyz));

	float4 color = light_color * light_angle * diffuse / 3.1415f;
	return color;
}
