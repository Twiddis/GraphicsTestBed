#include "../InputLayouts/default.hlsl"
#include "../ConstantBuffers/GBufferRenderFlags.hlsl"
#include "../ConstantBuffers/Light.hlsl"
#include "../ConstantBuffers/ViewVector.hlsl"

GBUFFER_RENDER_FLAGS(0);
LIGHT(1);
VIEW_VECTOR(2);

struct FSQ_Vertex
{
	float4 pos : SV_POSITION;
	float2 uv  : TEXCOORD;
};

SamplerState gSampler : register(s0);
Texture2D<float4> gGBuffer[4] : register(t0);

float4 main(FSQ_Vertex vin) : SV_TARGET
{
  float4 world_pos = gGBuffer[0].Sample(gSampler, vin.uv);
  float4 normal =    gGBuffer[1].Sample(gSampler, vin.uv);
	float4 diffuse =   gGBuffer[2].Sample(gSampler, vin.uv);
  float4 specular =  gGBuffer[3].Sample(gSampler, vin.uv);

	float3 light_dir = light_position - world_pos.xyz;
	float light_dist = length(light_dir);

	if (light_dist > light_radius)
	{
		return float4(0.0f, 0.0f, 0.0f, 0.0f);
	}
	else
	{
		light_dir = normalize(light_dir);

		float light_angle = saturate(dot(light_dir, normal.xyz));
		float4 diffuse_color = light_color * light_angle * diffuse;// * attenuation;

		float3 light_reflected = reflect(normal.xyz, light_dir);
		float3 view_vector = normalize(camera_pos.xyz - world_pos.xyz);

		float reflect_angle = saturate(dot(light_reflected, view_vector));

			// camera_pos.w = roughness
		return diffuse_color + (light_color * pow(reflect_angle, 100.0f) * specular); // * attenuation
	}
}
